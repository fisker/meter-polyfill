{"version":3,"sources":["polyfill.min.js"],"names":["root","factory","define","amd","module","exports","meterPolyfill","this","window","throwError","message","constructor","Error","lessThan","value","high","greaterThan","low","nearest","each","arrLike","func","i","len","PROP_LENGTH","FALSE","isUndefined","obj","isNull","NULL","isValidValue","isFinite","toFloat","parseValue","valueForNull","assignValues","target","source","METER_PROPS","prop","getPropValue","propValues","isNullValue","min","max","PROP_MIN","METER_INITAL_VALUES","PROP_MAX","PROP_LOW","PROP_HIGH","PROP_OPTIMUM","PROP_VALUE","meterCalculator","meter","keys","returnValues","optimum","percentage","level","LEVEL_OPTIMUM","LEVEL_SUBOPTIMUM","LEVEL_SUBSUBOPTIMUM","isFirefox","METER_VALUE_CLASSES","funcApplyCall","oThis","args","apply","METHOD_CALL","arraySliceCall","slice","arguments","arrayConcatCall","concat","funcBindCall","bind","includes","v","found","item","TRUE","throwTypeError","TypeError","pretendNativeFunction","funcName","METHOD_TO_STRING","toStingFns","toString","TO_STRING","replace","nativeToString","getOwnPropertyDescriptor","o","property","objectGetOwnPropertyDescriptor","_","METHOD_LOOKUP_SETTER","METHOD_LOOKUP_GETTER","descriptor","PROP_GET","PROP_SET","defineProperty","objectDefineProperty","configurable","e","PROP_ENUMERABLE","number","METHOD_DEFINE_SETTER","METHOD_DEFINE_GETTER","isElement","el","tagName","PROP_TAGNAME","METHOD_TO_UPPER_CASE","getErrorMessage","testFunc","defaultMsg","getPropGetter","propDependencies","METHOD_GET_ATTRIBUTE","getPropSetter","noFiniteMsgs","METHOD_SET_ATTRIBUTE","lablesGetter","assignedLables","propId","PROP_ID","allLabels","label","propFor","PROP_FOR","control","METHOD_GET_ELEMENTS_BY_TAG_NAME","METER_TAG_NAME","getPropDescriptor","getter","setter","enumerable","get","set","getValueDescriptor","document","navigator","userAgent","indexOf","METHOD_TO_LOWER_CASE","METER_INTERFACE","VERSION","NOOP","METER_CLASS_PREFIX","PROP_LABELS","METHOD_CREATE_ELEMENT","meterElement","nativeSupport","Number","parseFloat","PROP_PROTOTYPE","PROP_CONSTRUCTOR","PROP_PROTO","METHOD_APPLY","METHOD_CONCAT","METHOD_SLICE","oObject","Object","arrayPrototype","Array","funcPrototype","Function","funcToString","funcToBind","create","proto","getElementById","HTMLElement","Element","Node","documentElement","LABEL_TAG_NAME","allMeters","createElement","HTMLLabelElement","findLabelAssociatedElement","htmlFor","childNodes","getElementsByTagName","associated","node","LABELABLE_ELEMENTS","PROP_CONTROL","split","HTMLLabelElementPrototype","PROP_VOLUME","PROP_PLACEHOLDER","errorMsgNonFinite","Audio","MSG_NON_FINITE","msgs","props","meterDescriptors","descriptors","HTMLMeterElement","MSG_ILLEAGE_CONSTRUCTOR","HTMLMeterElementPrototype","labelsDescriptor","on","eventTypes","listener","useCapture","type","SUPPORTS_ADD_EVENT_LISTENER","METHOD_ADD_EVENT_LISTENER","SUPPORTS_ATTACH_EVENT","METHOD_ATTACH_EVENT","observe","callback","options","observer","MutationObserver","walkContext","context","observerAttributes","attrs","SUPPORTS_MUTATION_OBSERVER","mutations","mutation","atrr","attributeName","attributes","attributeFilter","SUPPORTS_DOM_ATTR_MODIFIED","METHOD_DOM_ATTR_MODIFIED","attr","attrName","SUPPORTS_PROPERTYCHANGE","propertyName","polyfillMeter","innerHTML","METER_SHADOW_HTML","defineMeterProperties","updateMeterStyle","triggerAttrChange","result","PROP_CLASS_NAME","PROP_STYLE","PROP_WIDTH","valueElement","PROP_FIRST_CHILD","currentClassName","changeClassName","currentWidth","changeWidth","properties","SUPPORTS_ATTERS_AS_PROPS","setAttribute","methodSetAttribute","removeAttribute","METHOD_REMOVE_ATTRIBUTE","methodRemoveAttribute","METHOD_CLONE_NODE","cloneNode","methodCloneNode","deep","clone","POLYFILL_FLAG","hasOwnProperty","observerDocument","PROP_TARGET","subtree","childList","SUPPORTS_DOM_NODE_INSERTED","METHOD_DOM_NODE_INSERTED","setInterval","TIMEOUT_FREQUENCY","METHOD_REMOVE_CHILD","METHOD_APPEND_CHILD","DIV_TAG_NAME","DIV_OPENING_TAG","DIV_CLOSING_TAG","WebKitMutationObserver","testDiv","testChild","join","setTimeout","setReady","isReady","completed","readyState","isTop","frameElement","doScroll","polyfillWhenReady","version","CLASSES","calc"],"mappings":"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","file":"polyfill.min.js","sourcesContent":["/* globals define: true, module: true*/\n(function(root, factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    define(function() {return factory(root);});\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory(root);\n  } else {\n    root.meterPolyfill = factory(root);\n  }\n})(this, function(window) {\n  'use strict';\n\n  var document = window.document;\n\n  function throwError(message, constructor) {\n      throw new(constructor || Error)(message);\n  }\n\n  if (!document) {\n      throwError('meter-polyfill requires a window with a document.');\n  }\n\n  var isFirefox = window.navigator.userAgent.indexOf('Firefox') > -1;\n\n  var METHOD_TO_UPPER_CASE = 'toUpperCase';\n  var METHOD_TO_LOWER_CASE = 'toLowerCase';\n\n  var METER_TAG_NAME = 'FAKEMETER';\n  var METER_INTERFACE = '<%= METER_INTERFACE %>';\n  var VERSION = '1.6.1';\n\n  var NOOP = function() {}; // eslint no-empty-function: 0\n  var TRUE = true;\n  var FALSE = false;\n  var NULL = null;\n\n  var LEVEL_OPTIMUM = 1;\n  var LEVEL_SUBOPTIMUM = 2;\n  var LEVEL_SUBSUBOPTIMUM = 3;\n\n  var METER_CLASS_PREFIX = METER_TAG_NAME[METHOD_TO_LOWER_CASE]() + '-';\n  var METER_VALUE_CLASSES = {};\n  METER_VALUE_CLASSES[LEVEL_OPTIMUM] = METER_CLASS_PREFIX + 'optimum-value';\n  METER_VALUE_CLASSES[LEVEL_SUBOPTIMUM] = METER_CLASS_PREFIX + 'suboptimum-value';\n  METER_VALUE_CLASSES[LEVEL_SUBSUBOPTIMUM] = METER_CLASS_PREFIX + 'even-less-good-value';\n\n  var PROP_MIN = 'min';\n  var PROP_MAX = 'max';\n  var PROP_LOW = 'low';\n  var PROP_HIGH = 'high';\n  var PROP_VALUE = 'value';\n  var PROP_OPTIMUM = 'optimum';\n  var PROP_LABELS = 'labels';\n\n  var METER_PROPS = [PROP_MIN, PROP_MAX, PROP_LOW, PROP_HIGH, PROP_OPTIMUM, PROP_VALUE];\n\n  var METER_INITAL_VALUES = {\n      min: 0,\n      max: 1,\n      value: 0\n  };\n\n  // var PRECISION = isFirefox ? 16 : 6; // firefox and chrome use different precision\n\n  var PROP_LENGTH = 'length';\n  var METHOD_CREATE_ELEMENT = 'createElement';\n\n  var meterElement = document[METHOD_CREATE_ELEMENT](METER_TAG_NAME);\n  var nativeSupport = meterElement[PROP_MAX] === METER_INITAL_VALUES[PROP_MAX];\n\n  var toFloat = Number.parseFloat || parseFloat;\n\n  /**\n   * return value less than high\n   * @param  {Number} value\n   * @param  {Number} high\n   * @return {Number}\n   */\n  function lessThan(value, high) {\n      if (value > high) {\n          value = high;\n      }\n      return value;\n  }\n\n  /**\n   * return value greater than low\n   * @param  {Number} value\n   * @param  {Number} low\n   * @return {Number}\n   */\n  function greaterThan(value, low) {\n      if (value < low) {\n          value = low;\n      }\n      return value;\n  }\n\n  function nearest(value, low, high) {\n      if (value < low) {\n          value = low;\n      }\n\n      if (value > high) {\n          value = high;\n      }\n\n      return value;\n  }\n\n  function each(arrLike, func) {\n      var i = 0;\n      var len = arrLike[PROP_LENGTH];\n      for (; i < len; i++) {\n          if (func(arrLike[i], i) === FALSE) {\n              break;\n          }\n      }\n  }\n\n  function isUndefined(obj) {\n      return typeof obj === 'undefined';\n  }\n\n  function isNull(obj) {\n      return obj === NULL;\n  }\n\n  function isValidValue(obj) {\n      return isNull(obj) || isFinite(toFloat(obj));\n  }\n\n  function parseValue(value, valueForNull) {\n      if (isUndefined(valueForNull)) {\n          valueForNull = NULL;\n      }\n      return !isValidValue(value) || isNull(value) ?\n          valueForNull :\n          toFloat(value);\n  }\n\n  function assignValues(target, source) {\n      each(METER_PROPS, function(prop) {\n          target[prop] = parseValue(source[prop]);\n      });\n      return target;\n  }\n\n  function getPropValue(propValues, prop) {\n      var value = propValues[prop];\n      var isNullValue = isNull(value);\n      var min;\n      var max;\n      switch (prop) {\n          case PROP_MIN:\n              value = isNullValue ?\n                  METER_INITAL_VALUES[PROP_MIN] :\n                  value;\n              break;\n\n          case PROP_MAX:\n              value = isNullValue ?\n                  METER_INITAL_VALUES[PROP_MAX] :\n                  value;\n              min = getPropValue(propValues, PROP_MIN);\n              value = greaterThan(value, min);\n              break;\n\n          case PROP_LOW:\n              min = getPropValue(propValues, PROP_MIN);\n              value = isNullValue ?\n                  min :\n                  nearest(value, min, getPropValue(propValues, PROP_MAX));\n              break;\n\n          case PROP_HIGH:\n              max = getPropValue(propValues, PROP_MAX);\n              value = isNullValue ?\n                  max :\n                  nearest(value, getPropValue(propValues, PROP_LOW), max);\n              break;\n\n          case PROP_OPTIMUM:\n              min = getPropValue(propValues, PROP_MIN);\n              max = getPropValue(propValues, PROP_MAX);\n              value = isNullValue ?\n                  (max - min) / 2 + min :\n                  nearest(value, min, max);\n              break;\n\n          case PROP_VALUE:\n              value = isNullValue ?\n                  METER_INITAL_VALUES[PROP_VALUE] :\n                  value;\n              min = getPropValue(propValues, PROP_MIN);\n              max = getPropValue(propValues, PROP_MAX);\n              value = nearest(value, min, max);\n              break;\n\n          default:\n              break;\n      }\n      return value;\n  }\n\n  function meterCalculator(meter, keys) {\n      var propValues = assignValues({}, meter);\n      var returnValues = {};\n      each(METER_PROPS, function(prop) {\n          returnValues[prop] =\n              propValues[prop] =\n              getPropValue(propValues, prop);\n      });\n\n      var min = propValues[PROP_MIN];\n      var max = propValues[PROP_MAX];\n      var low = propValues[PROP_LOW];\n      var high = propValues[PROP_HIGH];\n      var optimum = propValues[PROP_OPTIMUM];\n      var value = propValues[PROP_VALUE];\n\n      var percentage = min === max ? 0 : (value - min) / (max - min) * 100;\n      var level = LEVEL_OPTIMUM;\n\n      if (\n          high === max ||\n          low === min ||\n          (optimum >= low && optimum <= high)\n      ) {\n          if (\n              (low <= optimum && value < low) ||\n              (low > optimum && value > low) ||\n              (high < optimum && value < high) ||\n              (high >= optimum && value > high)\n          ) {\n              level = LEVEL_SUBOPTIMUM;\n          }\n      } else if (low === high) {\n          if (\n              (low <= optimum && value < low) ||\n              (high > optimum && value > high)\n          ) {\n              level = LEVEL_SUBSUBOPTIMUM;\n          }\n      } else if (optimum < low) {\n          if (value > low && value <= high) {\n              level = LEVEL_SUBOPTIMUM;\n          } else if (value > high) {\n              level = LEVEL_SUBSUBOPTIMUM;\n          }\n      } else if (optimum > high) {\n          if (value >= low && value < high) {\n              level = LEVEL_SUBOPTIMUM;\n          } else if (value < low) {\n              level = LEVEL_SUBSUBOPTIMUM;\n          }\n      }\n\n      // firefox show diffently from chrome\n      // when value === high/low or min === max\n      if (isFirefox) {\n          if (min === max) {\n              percentage = 100;\n          }\n\n          if (\n              (optimum > high && value === high) ||\n              (optimum < low && value === low)\n          ) {\n              level = LEVEL_SUBOPTIMUM;\n          }\n      }\n\n      returnValues['percentage'] = percentage;\n      returnValues['level'] = level;\n      returnValues['className'] = METER_VALUE_CLASSES[level];\n\n      return returnValues;\n  }\n\n  var PROP_PROTOTYPE = 'prototype';\n  var PROP_CONSTRUCTOR = 'constructor';\n  var PROP_PROTO = '__proto__';\n\n  var METHOD_CALL = 'call';\n  var METHOD_APPLY = 'apply';\n  var METHOD_CONCAT = 'concat';\n  var METHOD_SLICE = 'slice';\n  var METHOD_TO_STRING = 'toString';\n\n  var oObject = Object;\n  var arrayPrototype = Array[PROP_PROTOTYPE];\n  var funcPrototype = Function[PROP_PROTOTYPE];\n  // var objPrototype = oObject[PROP_PROTOTYPE];\n\n  var objectDefineProperty = oObject.defineProperty;\n  var objectGetOwnPropertyDescriptor = oObject.getOwnPropertyDescriptor;\n\n  var slice = arrayPrototype[METHOD_SLICE];\n  var apply = funcPrototype[METHOD_APPLY];\n  var concat = arrayPrototype[METHOD_CONCAT];\n\n  var funcToString = funcPrototype[METHOD_TO_STRING];\n  var TO_STRING = '' + funcToString;\n\n  function funcApplyCall(func, oThis, args) {\n      return apply[METHOD_CALL](func, oThis, args);\n  }\n\n  function arraySliceCall(arrLike) {\n      var args = funcApplyCall(slice, arguments, [1]);\n      return funcApplyCall(slice, arrLike, args);\n  }\n\n  function arrayConcatCall(arrLike) {\n      var args = arraySliceCall(arguments, 1);\n      return funcApplyCall(concat, arrLike, args);\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n  var bind = funcPrototype.bind || function(oThis) {\n      var args = arraySliceCall(arguments, 1);\n      var funcToBind = this;\n      return function() {\n          args = arrayConcatCall(args, arguments);\n          return funcApplyCall(funcToBind, oThis, args);\n      };\n  };\n\n  function funcBindCall(func) {\n      return funcApplyCall(bind, func, arraySliceCall(arguments, 1));\n  }\n\n  var create = oObject.create || function(proto) {\n      // simple but enough\n      NOOP[PROP_PROTOTYPE] = proto;\n      return new NOOP();\n  };\n\n  function includes(arrLike, v) {\n      var found = FALSE;\n      each(arrLike, function(item) {\n          if (item === v) {\n              found = TRUE;\n              return FALSE;\n          }\n      });\n      return found;\n  }\n\n  function throwTypeError(message) {\n      throwError(message, TypeError);\n  }\n\n  var nativeToString = funcBindCall(funcToString, funcToString);\n  nativeToString[METHOD_TO_STRING] = nativeToString;\n\n  // cache toStingFunctions\n  var toStingFns = {};\n\n  function pretendNativeFunction(funcName, func) {\n      func[METHOD_TO_STRING] = toStingFns[funcName] ||\n          (toStingFns[funcName] = (function() {\n              function toString() {\n                  return TO_STRING.replace(METHOD_TO_STRING, funcName);\n              }\n              toString[METHOD_TO_STRING] = nativeToString;\n              return toString;\n          })());\n      return func;\n  }\n\n  var PROP_GET = 'get';\n  var PROP_SET = 'set';\n\n  function getOwnPropertyDescriptor(o, property) {\n      if (objectGetOwnPropertyDescriptor) {\n          // ie <= 8 fails\n          try {\n              return objectGetOwnPropertyDescriptor(o, property);\n          } catch (_) {}\n      }\n\n      var METHOD_LOOKUP_SETTER = '__looupSetter__';\n      var METHOD_LOOKUP_GETTER = '__lookupGetter__';\n      var descriptor = {};\n      if (METHOD_LOOKUP_GETTER in o) {\n          descriptor[PROP_GET] = o[METHOD_LOOKUP_GETTER](property);\n      } else {\n          descriptor[PROP_VALUE] = descriptor[PROP_VALUE];\n      }\n      if (METHOD_LOOKUP_SETTER in o) {\n          descriptor[PROP_SET] = o[METHOD_LOOKUP_SETTER](property);\n      }\n      return descriptor;\n  }\n\n  function defineProperty(o, property, descriptor) {\n      if (objectDefineProperty) {\n          descriptor.configurable = TRUE;\n\n          try {\n              return objectDefineProperty(o, property, descriptor);\n          } catch (e) {\n              var PROP_ENUMERABLE = 'enumerable';\n              if (descriptor[PROP_ENUMERABLE] && e.number === -0x7FF5EC54) {\n                  descriptor[PROP_ENUMERABLE] = FALSE;\n                  return objectDefineProperty(o, property, descriptor);\n              }\n          }\n      } else {\n          var METHOD_DEFINE_SETTER = '__defineSetter__';\n          var METHOD_DEFINE_GETTER = '__defineGetter__';\n          if (descriptor[PROP_GET]) {\n              if (METHOD_DEFINE_GETTER in o) {\n                  o[METHOD_DEFINE_GETTER](property, descriptor[PROP_GET]);\n              } else {\n                  o[property] = funcBindCall(descriptor[PROP_GET], o);\n              }\n          }\n\n          if (descriptor[PROP_SET] && METHOD_DEFINE_SETTER in o) {\n              o[METHOD_DEFINE_SETTER](property, descriptor[PROP_SET]);\n          }\n\n          if (descriptor[PROP_VALUE]) {\n              o[property] = descriptor[PROP_VALUE];\n          }\n      }\n  }\n\n\n  var PROP_ID = 'id';\n  var PROP_FOR = 'htmlFor';\n\n  var METHOD_GET_ELEMENTS_BY_TAG_NAME = 'getElementsByTagName';\n  var METHOD_SET_ATTRIBUTE = 'setAttribute';\n\n  var getElementById = funcBindCall(document.getElementById, document);\n  var HTMLElement = window.HTMLElement || window.Element || window.Node || NOOP;\n  var documentElement = document.documentElement;\n\n  var LABEL_TAG_NAME = 'LABEL';\n\n  var allLabels = documentElement[METHOD_GET_ELEMENTS_BY_TAG_NAME](LABEL_TAG_NAME);\n  var allMeters = documentElement[METHOD_GET_ELEMENTS_BY_TAG_NAME](METER_TAG_NAME);\n\n  // ie 8 document.createElement is not a function\n  // ie 7 document.createElement.apply is undefined\n  // var createElement = (function(createElement) {\n  //   return function() {\n  //     return funcApplyCall(createElement, document, arguments);\n  //   };\n  // })(document[METHOD_CREATE_ELEMENT]);\n  var createElement = funcBindCall(document[METHOD_CREATE_ELEMENT], document);\n\n  function isElement(el, tagName) {\n      var PROP_TAGNAME = 'tagName';\n      return el && el[PROP_TAGNAME] && el[PROP_TAGNAME][METHOD_TO_UPPER_CASE]() === tagName;\n  }\n\n  (function(HTMLLabelElement) {\n      var PROP_CONTROL = 'control';\n      var LABELABLE_ELEMENTS = ('BUTTON INPUT KEYGEN ' + METER_TAG_NAME + ' OUTPUT PROGRESS SELECT TEXTAREA').split(' ');\n\n      function findLabelAssociatedElement() {\n          var label = this;\n          var htmlFor = label[PROP_FOR];\n          if (htmlFor) {\n              return getElementById(htmlFor);\n          }\n\n          var childNodes = label.getElementsByTagName('*');\n          var associated = NULL;\n          each(childNodes, function(node) {\n              each(LABELABLE_ELEMENTS, function(tagName) {\n                  if (isElement(node, tagName)) {\n                      associated = node;\n                      return false;\n                  }\n              });\n              return !associated;\n          });\n\n          return associated;\n      }\n\n      var HTMLLabelElementPrototype = HTMLLabelElement && HTMLLabelElement[PROP_PROTOTYPE];\n      if (!HTMLLabelElementPrototype) {\n          return;\n      }\n      var descriptor = getOwnPropertyDescriptor(HTMLLabelElementPrototype, PROP_CONTROL);\n      if (!descriptor) {\n          defineProperty(HTMLLabelElementPrototype, PROP_CONTROL, getPropDescriptor(findLabelAssociatedElement));\n      }\n  })(window.HTMLLabelElement);\n\n  function getErrorMessage(testFunc, defaultMsg) {\n      try {\n          testFunc();\n      } catch (e) {\n          return e.message;\n      }\n      return defaultMsg;\n  }\n\n  var noFiniteMsgs = (function() {\n      // find right msg by test on a non-finite prop of known element\n      // posiable currentTime/playbackRate/volume on HTMLMediaElement\n      // safari fails\n      var PROP_VOLUME = 'volume';\n      var PROP_PLACEHOLDER = '[prop]';\n      var errorMsgNonFinite = getErrorMessage(function() {\n          if (Audio) {\n              new Audio()[PROP_VOLUME] = 'x';\n          }\n      }, METER_INTERFACE + '.' + PROP_VOLUME + ' error');\n      var MSG_NON_FINITE = errorMsgNonFinite\n          .replace('HTMLMediaElement', METER_INTERFACE)\n          .replace(PROP_VOLUME, PROP_PLACEHOLDER);\n\n      var msgs = {};\n      each(METER_PROPS, function(prop) {\n          msgs[prop] = MSG_NON_FINITE.replace(PROP_PLACEHOLDER, prop);\n      });\n      return msgs;\n  })();\n\n  // only get necessary props\n  var propDependencies = (function() {\n      var props = {};\n      props[PROP_MIN] = [];\n      props[PROP_MAX] = [PROP_MIN];\n      props[PROP_LOW] =\n          props[PROP_OPTIMUM] =\n          props[PROP_VALUE] = [PROP_MIN, PROP_MAX];\n      props[PROP_HIGH] = [PROP_MIN, PROP_MAX, PROP_LOW];\n\n      each(METER_PROPS, function(prop) {\n          props[prop] = arrayConcatCall(props[prop], [prop]);\n      });\n      return props;\n  })();\n\n\n  var METHOD_GET_ATTRIBUTE = 'getAttribute';\n  // use common getter & setter\n  function getPropGetter(prop) {\n      return function() {\n          var meter = this;\n          var propValues = {};\n          each(propDependencies[prop], function(prop) {\n              propValues[prop] = parseValue(meter[METHOD_GET_ATTRIBUTE](prop));\n          });\n\n          return getPropValue(propValues, prop);\n      }\n  }\n\n  function getPropSetter(prop) {\n      return function(value) {\n          var meter = this;\n          if (!isValidValue(value)) {\n              throwTypeError(noFiniteMsgs[prop]);\n          }\n\n          meter[METHOD_SET_ATTRIBUTE](prop, '' + parseValue(value, 0));\n          return value;\n      };\n  }\n\n  function lablesGetter() {\n      var meter = this;\n      var assignedLables = [];\n      var i = 0;\n      var propId = meter[PROP_ID];\n\n      each(allLabels, function(label) {\n          var propFor = label[PROP_FOR];\n\n          if (\n              (label.control === meter) ||\n              (!propFor && label[METHOD_GET_ELEMENTS_BY_TAG_NAME](METER_TAG_NAME)[0] === meter) ||\n              (propFor && propFor === propId)\n          ) {\n              assignedLables[i++] = label;\n          }\n      });\n\n      return assignedLables;\n  }\n\n  function getPropDescriptor(getter, setter) {\n      return { enumerable: TRUE, get: getter, set: setter };\n  }\n\n  function getValueDescriptor(value) {\n      return { value: value };\n  }\n\n  var meterDescriptors = (function() {\n      var descriptors = {};\n      each(METER_PROPS, function(prop) {\n          descriptors[prop] = getPropDescriptor(\n              getPropGetter(prop),\n              getPropSetter(prop)\n          );\n      });\n      descriptors[PROP_LABELS] = getPropDescriptor(lablesGetter);\n      return descriptors;\n  })();\n\n\n  var HTMLMeterElement = (function(HTMLMeterElement) {\n      var MSG_ILLEAGE_CONSTRUCTOR = getErrorMessage(function() {\n          HTMLElement && new HTMLElement();\n      }, 'Illegal constructor');\n\n      var HTMLMeterElementPrototype;\n      if (!HTMLMeterElement) {\n          HTMLMeterElement = window[METER_INTERFACE] = function() {\n              throwTypeError(MSG_ILLEAGE_CONSTRUCTOR);\n          };\n          HTMLMeterElementPrototype = create(HTMLElement[PROP_PROTOTYPE]);\n          HTMLMeterElementPrototype[PROP_CONSTRUCTOR] = HTMLMeterElement;\n          HTMLMeterElement[PROP_PROTOTYPE] = HTMLMeterElementPrototype;\n          HTMLMeterElement[PROP_PROTO] = HTMLElement;\n          HTMLMeterElement = pretendNativeFunction(METER_INTERFACE, HTMLMeterElement);\n      } else {\n          HTMLMeterElementPrototype = HTMLMeterElement[PROP_PROTOTYPE];\n      }\n\n      var labelsDescriptor = getOwnPropertyDescriptor(HTMLMeterElementPrototype, PROP_LABELS);\n      if (!labelsDescriptor) {\n          defineProperty(HTMLMeterElementPrototype, PROP_LABELS, meterDescriptors[PROP_LABELS]);\n      }\n\n      each(METER_PROPS, function(prop) {\n          var descriptor = getOwnPropertyDescriptor(HTMLMeterElementPrototype, prop);\n          if (!descriptor) {\n              defineProperty(HTMLMeterElementPrototype, prop, meterDescriptors[prop]);\n          }\n      });\n\n      return HTMLMeterElement;\n  })(window[METER_INTERFACE]);\n\n  var meterPolyfill = meterElement[PROP_CONSTRUCTOR] === HTMLMeterElement ? NOOP : (function() {\n      /* polyfill starts */\n\n      var POLYFILL_FLAG = '_polyfill';\n\n      var METHOD_REMOVE_CHILD = 'removeChild';\n      var METHOD_REMOVE_ATTRIBUTE = 'removeAttribute';\n      var METHOD_APPEND_CHILD = 'appendChild';\n      var METHOD_ADD_EVENT_LISTENER = 'addEventListener';\n      var METHOD_ATTACH_EVENT = 'attachEvent';\n      var PROP_FIRST_CHILD = 'firstChild';\n\n      var DIV_TAG_NAME = 'DIV';\n\n      var DIV_OPENING_TAG = '<div class=\"';\n      var DIV_CLOSING_TAG = '</div>';\n\n      var TIMEOUT_FREQUENCY = 10;\n\n      // there is no moz/ms/o vendor prefix\n      var MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n      meterElement[POLYFILL_FLAG] = VERSION; // for attersAsProps test\n\n      var SUPPORTS_MUTATION_OBSERVER = !!MutationObserver;\n      var SUPPORTS_ADD_EVENT_LISTENER = !!window[METHOD_ADD_EVENT_LISTENER];\n      var SUPPORTS_ATTACH_EVENT = !!window[METHOD_ATTACH_EVENT];\n      // ie <= 8 attributes are same as properties\n      var SUPPORTS_ATTERS_AS_PROPS = meterElement[METHOD_GET_ATTRIBUTE](POLYFILL_FLAG) ===\n          VERSION;\n      var SUPPORTS_PROPERTYCHANGE = 'onpropertychange' in document;\n      var SUPPORTS_DOM_NODE_INSERTED = FALSE;\n      var SUPPORTS_DOM_ATTR_MODIFIED = FALSE;\n\n\n      var METHOD_DOM_NODE_INSERTED = 'DOMNodeInserted';\n      var METHOD_DOM_ATTR_MODIFIED = 'DOMAttrModified';\n      if (!SUPPORTS_MUTATION_OBSERVER) {\n          var testDiv = createElement(DIV_TAG_NAME);\n          var testChild = createElement(DIV_TAG_NAME);\n\n          on(testDiv, METHOD_DOM_NODE_INSERTED, function() {\n              SUPPORTS_DOM_NODE_INSERTED = TRUE;\n          });\n          on(testDiv, METHOD_DOM_ATTR_MODIFIED, function() {\n              SUPPORTS_DOM_ATTR_MODIFIED = TRUE;\n          });\n\n          testDiv[METHOD_APPEND_CHILD](testChild);\n          testDiv[METHOD_SET_ATTRIBUTE](POLYFILL_FLAG, VERSION);\n\n          testDiv = testChild = NULL;\n      }\n\n      function on(target, eventTypes, listener, useCapture) {\n          each(eventTypes.split(' '), function(type) {\n              if (SUPPORTS_ADD_EVENT_LISTENER) {\n                  target[METHOD_ADD_EVENT_LISTENER](type, listener, !!useCapture);\n              } else if (SUPPORTS_ATTACH_EVENT) {\n                  target[METHOD_ATTACH_EVENT]('on' + type, listener);\n              } else {\n                  target['on' + type] = listener;\n              }\n          });\n      }\n\n      function observe(target, callback, options) {\n          var observer = new MutationObserver(callback);\n          observer.observe(target, options);\n          return observer;\n      }\n\n      var METER_SHADOW_HTML = [\n          DIV_OPENING_TAG + METER_CLASS_PREFIX + 'inner-element\">',\n          DIV_OPENING_TAG + METER_CLASS_PREFIX + 'bar\">',\n          DIV_OPENING_TAG + METER_VALUE_CLASSES[LEVEL_SUBOPTIMUM] + '\" style=\"width: 0%\">',\n          DIV_CLOSING_TAG,\n          DIV_CLOSING_TAG,\n          DIV_CLOSING_TAG\n      ].join('');\n\n      var setTimeout = window.setTimeout;\n      var setInterval = window.setInterval;\n\n      function walkContext(context, tagName, func) {\n          context = context[PROP_LENGTH] ? context : context[METHOD_GET_ELEMENTS_BY_TAG_NAME](tagName);\n          each(context, function(context) {\n              func(context);\n          });\n      }\n\n      function observerAttributes(target, attrs, callback) {\n          if (SUPPORTS_MUTATION_OBSERVER) {\n              observe(target, function(mutations) {\n                  each(mutations, function(mutation) {\n                      var atrr = mutation.attributeName[METHOD_TO_LOWER_CASE]();\n                      callback(target, atrr);\n                  });\n              }, {\n                  attributes: TRUE,\n                  attributeFilter: attrs\n              });\n          } else if (SUPPORTS_DOM_ATTR_MODIFIED) {\n              on(target, METHOD_DOM_ATTR_MODIFIED, function(e) {\n                  var attr = e.attrName[METHOD_TO_LOWER_CASE]();\n                  if (includes(attrs, attr)) {\n                      callback(target, attr);\n                  }\n              });\n          } else if (SUPPORTS_PROPERTYCHANGE) {\n              on(target, 'propertychange', function(e) {\n                  var prop = e.propertyName[METHOD_TO_LOWER_CASE]();\n                  if (includes(attrs, prop)) {\n                      callback(target, prop);\n                  }\n              });\n          }\n          // anything else?\n      }\n\n      function polyfillMeter(context) {\n          if (!isElement(context, METER_TAG_NAME)) {\n              return walkContext(context || allMeters, METER_TAG_NAME, polyfillMeter);\n          }\n\n          var meter = context;\n          if (meter.constructor !== HTMLMeterElement) {\n              meter.innerHTML = METER_SHADOW_HTML;\n              defineMeterProperties(meter);\n              updateMeterStyle(meter);\n              observerAttributes(meter, METER_PROPS, triggerAttrChange);\n          }\n      }\n\n      function updateMeterStyle(meter) {\n          var result = meterCalculator(meter);\n\n          var PROP_CLASS_NAME = 'className';\n          var PROP_STYLE = 'style';\n          var PROP_WIDTH = 'width';\n\n          var valueElement = meter[PROP_FIRST_CHILD][PROP_FIRST_CHILD][PROP_FIRST_CHILD];\n\n          // only update when necessary\n          var currentClassName = valueElement[PROP_CLASS_NAME];\n          var changeClassName = result[PROP_CLASS_NAME];\n          if (currentClassName !== changeClassName) {\n              valueElement[PROP_CLASS_NAME] = changeClassName;\n          }\n\n          var currentWidth = valueElement[PROP_STYLE][PROP_WIDTH];\n          var changeWidth = result.percentage + '%';\n          if (currentWidth !== changeWidth) {\n              valueElement[PROP_STYLE][PROP_WIDTH] = changeWidth;\n          }\n          return meter;\n      }\n\n      function triggerAttrChange(meter, attr) {\n          if (includes(METER_PROPS, attr[METHOD_TO_LOWER_CASE]())) {\n              updateMeterStyle(meter);\n          }\n      }\n\n      function defineMeterProperties(meter) {\n          var HTMLMeterElementPrototype = HTMLMeterElement[PROP_PROTOTYPE];\n          var properties = {};\n\n          if (!SUPPORTS_ATTERS_AS_PROPS) {\n              each(METER_PROPS, function(prop) {\n                  properties[prop] = meterDescriptors[prop];\n              });\n          }\n\n          properties[PROP_LABELS] = meterDescriptors[PROP_LABELS];\n\n          if (!SUPPORTS_ATTERS_AS_PROPS) {\n              var setAttribute = funcBindCall(meter[METHOD_SET_ATTRIBUTE], meter);\n\n              var methodSetAttribute = pretendNativeFunction(METHOD_SET_ATTRIBUTE, function(attr, value) {\n                  setAttribute(attr, value);\n                  triggerAttrChange(meter, attr);\n              });\n\n              properties[METHOD_SET_ATTRIBUTE] = getValueDescriptor(methodSetAttribute);\n          }\n\n          if (SUPPORTS_ATTERS_AS_PROPS) {\n              var removeAttribute = funcBindCall(meter[METHOD_REMOVE_ATTRIBUTE], meter);\n\n              var methodRemoveAttribute = pretendNativeFunction(METHOD_REMOVE_ATTRIBUTE, function(attr) {\n                  removeAttribute(attr);\n                  triggerAttrChange(meter, attr);\n              });\n\n              properties[METHOD_REMOVE_ATTRIBUTE] = getValueDescriptor(methodRemoveAttribute);\n          }\n\n          var METHOD_CLONE_NODE = 'cloneNode';\n          var cloneNode = funcBindCall(meter[METHOD_CLONE_NODE], meter);\n          var methodCloneNode = pretendNativeFunction(METHOD_CLONE_NODE, function(deep) {\n              var clone = cloneNode(FALSE);\n              if (SUPPORTS_ATTERS_AS_PROPS) {\n                  clone[METHOD_REMOVE_ATTRIBUTE](POLYFILL_FLAG);\n              }\n              polyfillMeter(clone);\n              return clone;\n          });\n\n          properties[METHOD_CLONE_NODE] = getValueDescriptor(methodCloneNode);\n          properties[POLYFILL_FLAG] = getValueDescriptor(VERSION);\n\n          if (meter[PROP_CONSTRUCTOR] !== HTMLMeterElement) {\n              properties[PROP_CONSTRUCTOR] = getValueDescriptor(HTMLMeterElement);\n          }\n\n\n          for (var prop in properties) {\n              if (properties.hasOwnProperty(prop)) {\n                  defineProperty(meter, prop, properties[prop]);\n              }\n          }\n      }\n\n      // overwrite document.createElement\n      document[METHOD_CREATE_ELEMENT] = pretendNativeFunction(METHOD_CREATE_ELEMENT, function() {\n          var el = funcApplyCall(createElement, document, arguments);\n          if (isElement(el, METER_TAG_NAME)) {\n              polyfillMeter(el);\n          }\n          return el;\n      });\n\n      function observerDocument() {\n          var PROP_TARGET = 'target';\n          if (SUPPORTS_MUTATION_OBSERVER) {\n              // observe subtree\n              observe(documentElement, function(mutations) {\n                  each(mutations, function(mutation) {\n                      polyfillMeter(mutation[PROP_TARGET]);\n                  });\n              }, {\n                  subtree: TRUE,\n                  childList: TRUE\n              });\n          } else {\n              if (SUPPORTS_DOM_NODE_INSERTED) {\n                  on(documentElement, METHOD_DOM_NODE_INSERTED, function(e) {\n                      polyfillMeter(e[PROP_TARGET]);\n                  });\n              } else {\n                  setInterval(polyfillMeter, TIMEOUT_FREQUENCY);\n              }\n          }\n      }\n\n      (function() {\n          var isReady = FALSE;\n          var isTop = FALSE;\n\n          function setReady() {\n              isReady = TRUE;\n          }\n\n          function completed() {\n              if (document.readyState === 'complete') {\n                  setReady();\n              }\n          }\n\n          try {\n              isTop = isNull(window.frameElement);\n          } catch (_) {}\n\n          if (!SUPPORTS_ADD_EVENT_LISTENER && documentElement.doScroll && isTop) {\n              (function doScroll() {\n                  try {\n                      documentElement.doScroll();\n                      setReady();\n                  } catch (_) {\n                      setTimeout(doScroll, TIMEOUT_FREQUENCY);\n                  }\n              })();\n          }\n\n          on(document, 'DOMContentLoaded', setReady);\n          on(window, 'load', setReady);\n          on(document, 'readystatechange', completed);\n          completed();\n\n          (function polyfillWhenReady() {\n              if (isReady) {\n                  polyfillMeter();\n                  observerDocument();\n              } else {\n                  setTimeout(polyfillWhenReady, TIMEOUT_FREQUENCY);\n              }\n          })();\n      })();\n\n      return polyfillMeter;\n  })();\n\n\n  meterPolyfill.version = VERSION;\n  meterPolyfill.CLASSES = METER_VALUE_CLASSES;\n  meterPolyfill.LEVEL_SUBOPTIMUM = LEVEL_SUBOPTIMUM;\n  meterPolyfill.LEVEL_OPTIMUM = LEVEL_OPTIMUM;\n  meterPolyfill.LEVEL_SUBSUBOPTIMUM = LEVEL_SUBSUBOPTIMUM;\n  meterPolyfill.calc = meterCalculator;\n\n\n  return meterPolyfill;\n});\n"]}